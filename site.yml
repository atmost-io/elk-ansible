---
- name: Deploy ELK Stack with Docker Compose on AWS
  hosts: elk_servers
  become: true
  vars:
    elk_version: "8.13.2"
    elastic_password: "Secure123Change"
    kibana_password: "Secure123Change"
    es_heap_size: "1g"

  tasks:
    - name: Create ELK stack directory
      file:
        path: /opt/elk-stack
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    - name: Create .env file for ELK stack
      copy:
        dest: /opt/elk-stack/.env
        content: |
          # ELK Stack Environment Variables
          STACK_VERSION=8.13.2
          ELASTIC_PASSWORD={{ elastic_password }}
          KIBANA_PASSWORD={{ kibana_password }}
          CLUSTER_NAME=elk-docker-cluster
          LICENSE=basic
          ES_PORT=9200
          KIBANA_PORT=5601
          MEM_LIMIT=2147483648
        mode: '0644'
        owner: ubuntu
        group: ubuntu

    - name: Create docker-compose.yml
      copy:
        dest: /opt/elk-stack/docker-compose.yml
        content: |
          version: "2.2"

          services:
            setup:
              image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
              volumes:
                - certs:/usr/share/elasticsearch/config/certs
              user: "0"
              command: >
                bash -c '
                  if [ x${ELASTIC_PASSWORD} == x ]; then
                    echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                    exit 1;
                  elif [ x${KIBANA_PASSWORD} == x ]; then
                    echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                    exit 1;
                  fi;
                  if [ ! -f config/certs/ca.zip ]; then
                    echo "Creating CA";
                    bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                    unzip config/certs/ca.zip -d config/certs;
                  fi;
                  if [ ! -f config/certs/certs.zip ]; then
                    echo "Creating certs";
                    echo -ne \
                    "instances:\n"\
                    "  - name: es01\n"\
                    "    dns:\n"\
                    "      - es01\n"\
                    "      - localhost\n"\
                    "    ip:\n"\
                    "      - 127.0.0.1\n"\
                    > config/certs/instances.yml;
                    bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                    unzip config/certs/certs.zip -d config/certs;
                  fi;
                  echo "Setting file permissions"
                  chown -R root:root config/certs;
                  find . -type d -exec chmod 750 \{\} \;;
                  find . -type f -exec chmod 640 \{\} \;;
                  echo "Waiting for Elasticsearch availability";
                  until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
                  echo "Setting kibana_system password";
                  until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
                  echo "All done!";
                '
              healthcheck:
                test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
                interval: 1s
                timeout: 5s
                retries: 120

            es01:
              depends_on:
                setup:
                  condition: service_healthy
              image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
              volumes:
                - certs:/usr/share/elasticsearch/config/certs
                - esdata:/usr/share/elasticsearch/data
              ports:
                - ${ES_PORT}:9200
              environment:
                - node.name=es01
                - cluster.name=${CLUSTER_NAME}
                - discovery.type=single-node
                - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
                - bootstrap.memory_lock=true
                - xpack.security.enabled=true
                - xpack.security.http.ssl.enabled=true
                - xpack.security.http.ssl.key=certs/es01/es01.key
                - xpack.security.http.ssl.certificate=certs/es01/es01.crt
                - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
                - xpack.security.transport.ssl.enabled=true
                - xpack.security.transport.ssl.key=certs/es01/es01.key
                - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
                - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
                - xpack.security.transport.ssl.verification_mode=certificate
                - xpack.license.self_generated.type=${LICENSE}
              mem_limit: ${MEM_LIMIT}
              ulimits:
                memlock:
                  soft: -1
                  hard: -1
              healthcheck:
                test:
                  [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
                  ]
                interval: 10s
                timeout: 10s
                retries: 120

            kibana:
              depends_on:
                es01:
                  condition: service_healthy
              image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
              volumes:
                - certs:/usr/share/kibana/config/certs
                - kibanadata:/usr/share/kibana/data
              ports:
                - ${KIBANA_PORT}:5601
              environment:
                - SERVERNAME=kibana
                - ELASTICSEARCH_HOSTS=https://es01:9200
                - ELASTICSEARCH_USERNAME=kibana_system
                - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
                - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
                - SERVER_PUBLICBASEURL=http://localhost:5601
              mem_limit: ${MEM_LIMIT}
              healthcheck:
                test:
                  [
                    "CMD-SHELL",
                    "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
                  ]
                interval: 10s
                timeout: 10s
                retries: 120

          volumes:
            certs:
              driver: local
            esdata:
              driver: local
            kibanadata:
              driver: local
        mode: '0644'
        owner: ubuntu
        group: ubuntu

    - name: Configure sysctl for Elasticsearch
      sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present
        reload: yes

    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
        state: present
        update_cache: yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Install Docker Compose
      apt:
        name: docker-compose
        state: present

    - name: Install Python Docker module
      pip:
        name: docker
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Pull required Docker images
      docker_image:
        name: "{{ item }}"
        source: pull
      loop:
        - "docker.elastic.co/elasticsearch/elasticsearch:8.13.2"
        - "docker.elastic.co/kibana/kibana:8.13.2"

    - name: Start ELK stack
      community.docker.docker_compose:
        project_src: /opt/elk-stack
        files:
          - docker-compose.yml
        state: present

    - name: Wait for Elasticsearch to be ready
      uri:
        url: "https://localhost:9200"
        method: GET
        user: elastic
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        status_code: 200
        validate_certs: no
      register: result
      until: result.status == 200
      retries: 60
      delay: 5
